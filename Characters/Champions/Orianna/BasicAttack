using GameServerCore.Enums;
using GameServerCore.Domain.GameObjects;
using GameServerCore.Domain.GameObjects.Spell;
using static LeagueSandbox.GameServer.API.ApiFunctionManager;
using LeagueSandbox.GameServer.Scripting.CSharp;
using System.Numerics;
using LeagueSandbox.GameServer.API;
using System.Collections.Generic;
using GameServerCore.Domain.GameObjects.Spell.Missile;
using GameServerCore.Scripting.CSharp;
using System;

namespace Spells
{
    public class OriannaBasicAttack : ISpellScript
    {
        public ISpellScriptMetadata ScriptMetadata { get; private set; } = new SpellScriptMetadata()
        {
            IsDamagingSpell = true
        };

        private IObjAiBase _orianna;
        private ISpell _thisSpell;
        private IAttackableUnit _currentTarget;
        private IAttackableUnit _previousTarget;
        public void OnActivate(IObjAiBase owner, ISpell spell)
        {
            _orianna = owner;
            _thisSpell = spell;
        }

        public void OnDeactivate(IObjAiBase owner, ISpell spell)
        {
        }

        public void OnSpellPreCast(IObjAiBase owner, ISpell spell, IAttackableUnit target, Vector2 start, Vector2 end)
        {
            _currentTarget = target;
            _thisSpell = spell;
            ApiEventManager.OnLaunchAttack.AddListener(this, _orianna, OnLaunchAttack, false);
        }

        public void OnLaunchAttack(ISpell spell)
        {
            if(_previousTarget != null && _currentTarget == _previousTarget)
            {
                AddBuff("OrianaPowerDagger", 4f, 1, spell, _orianna, _orianna);
            }
            else
            {
                _orianna.RemoveBuffsWithName("OrianaPowerDagger");
                _previousTarget = _currentTarget;
            }
        }

        public void OnSpellCast(ISpell spell)
        {
        }

        public void OnSpellPostCast(ISpell spell)
        {
        }

        public void OnSpellChannel(ISpell spell)
        {
        }

        public void OnSpellChannelCancel(ISpell spell, ChannelingStopSource reason)
        {
        }

        public void OnSpellPostChannel(ISpell spell)
        {
        }

        public void OnUpdate(float diff)
        {
        }
    }
}

